apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "minio-s3-gateway.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "minio-s3-gateway.name" . }}
    helm.sh/chart: {{ include "minio-s3-gateway.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "minio-s3-gateway.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ .Values.update.maxUnavailable }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "minio-s3-gateway.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      volumes:
        - name: cache
          emptyDir: {}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - "/bin/sh"
            - "-ce"
            - "/usr/bin/docker-entrypoint.sh minio gateway s3 {{ .Values.aws.endpoint }}"
          volumeMounts:
            - mountPath: /cache
              name: cache
          env:
            - name: AWS_ACCESS_KEY_ID
              value: "{{ .Values.aws.accessKeyId }}"
            - name: AWS_SECRET_ACCESS_KEY
              value: "{{ .Values.aws.secretAccessKey }}"
            - name: MINIO_ACCESS_KEY
              value: "{{ .Values.aws.accessKeyId }}"
            - name: MINIO_SECRET_KEY
              value: "{{ .Values.aws.secretAccessKey }}"
            - name: MINIO_CACHE
              value: "on"
            - name: MINIO_CACHE_DRIVES
              value: "/cache"
            - name: MINIO_CACHE_EXCLUDE
              value: "{{ .Values.cache.exclude }}"
            - name: MINIO_CACHE_QUOTA
              value: "{{ .Values.cache.quota }}"
            - name: MINIO_CACHE_AFTER
              value: "{{ .Values.cache.after }}"
            - name: MINIO_CACHE_WATERMARK_LOW
              value: "{{ .Values.cache.watermark.low }}"
            - name: MINIO_CACHE_WATERMARK_HIGH
              value: "{{ .Values.cache.watermark.high }}"
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: http
          readinessProbe:
            tcpSocket:
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
